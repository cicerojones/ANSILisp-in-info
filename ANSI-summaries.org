Summary

1. Lisp is an interactive language. If you type an expression into the
toplevel, Lisp will display its value.

2. Lisp programs consist of expressions. An expression can be an atom,
or a list of an operator followed by zero or more arguments. Prefix
syntax means that operators can take any number of arguments.

3. The evaluation rule for Common Lisp function calls: evaluate the
arguments left to right, and pass them to the function denoted by the
operator. The quote operator has its own evaluation rule, which is to
return the argument unchanged.

4. Along with the usual data types, Lisp has symbols and
lists. Because Lisp programs are expressed as lists, it's easy to
write programs that write programs.

5. The three basic list functions are cons, which builds a list\; car,
which returns the first element\; and cdr, which returns everything
after the first element.

6. In Common Lisp, t represents true and NIL represents false. In a
logical context, anything except NIL counts as true. The basic
conditional is if. The and and or operators resemble conditionals.

7. Lisp consists mainly of functions. You can define new ones with
defun.

8. A function that calls itself is recursive. A recursive
function should be considered as a process rather than a machine.

9. Parentheses are not an issue, because programmers read and write
Lisp by indentation.

10. The basic I/O functions are read, which includes a complete Lisp
parser, and format, which generates output based on templates.

11. You can create new local variables with l e t , and global
variables with defparameter.

12. The assignment operator is setf. Its first argument can be an
expression.

13. Functional programming, which means avoiding side-effects, is the
dominant paradigm in Lisp.

14. The basic iteration operator is do.

15. Functions are regular Lisp objects. They can be passed as
arguments, and denoted by lambda expressions.

16. In Lisp, values have types, not variables.
Summary

1. A cons is a two-part data structure. Lists are made of conses
linked together.

2. The predicate equal is less strict than eql. Essentially, it
returns true if its arguments print the same.

3. All Lisp objects behave like pointers. You never have to manipulate
pointers explicitly.



4. You can copy lists with c o p y - LIST , and join their elements
with append.



5. Run-length encoding is a simple compression algorithm for use in
restaurants.



6. Common Lisp has a variety of access functions defined in terms of
car and cdr.


7. Mapping functions apply a function to successive elements, or
successive tails, of a list.



8. Operations on nested lists are sometimes considered as operations
on trees.



9. To judge a recursive function, you only have to consider whether it
covers all the cases.



10. Lists can be used to represent sets. Several built-in functions
view lists this way.



11. Keyword arguments are optional, and are identified not by
position, but by symbolic tags that precede them.



12. Lists are a subtype of sequences. Common Lisp has a large number
of sequence functions.



13. A cons that isn't a proper list is called a dotted list.



14. Lists with conses as elements can be used to represent
mappings. Such lists are called assoc-lists.



15. Automatic memory management saves you from dealing with memory
allocation, but generating excessive garbage can make programs slow.


Summary

1. Common Lisp supports arrays of at least 7
dimensions. One-dimensional arrays are called vectors.


2. Strings are vectors of characters. Characters are objects in their
own right.



3. Sequences include lists and vectors. Many sequence functions take
keyword arguments from a standard set.



4. Parsing is easy in Lisp because it has so many functions that work
on strings.


5. Calling def struct defines a structure with named fields. It is a
good example of a program that writes programs.



6. Binary search trees are useful for maintaining a sorted collection
of objects.


7. Hash tables provide a more efficient way to represent sets and
mappings.


Summary

1. Common Lisp has three basic block constructs: progn\; block, which
allows returns\; and tagbody, which allows gotos. Many built-in
operators have implicit blocks.


2. Entering a new lexical context is conceptually equivalent to a
function call.


3. Common Lisp provides conditionals suited to various situations. All
can be denned in terms of if.

EXERCISES


97


4. There is a similar variety of operators for iteration.


5. Expressions can return multiple values.

6. Computations can be interrupted, and protected against the
consequences of interruption.


Summary

1. A named function is a function stored as the symbol-function of a
symbol. The def un macro hides such details. It also allows you to
define documentation strings, and specify how s e t f should treat
calls.


2. It is possible to define local functions, similar in spirit to
local variables.


3. Functions can have optional, rest, and keyword parameters.


4. Utilities are additions to Lisp. They are an example of bottom-up
programming on a small scale.


5. Lexical variables persist as long as something refers to
them. Closures are functions that refer to free variables. You can
write functions that return closures.


6. Dylan provides functions for building functions. Using closures,
it's easy to implement them in Common Lisp.


7. Special variables have dynamic scope.


8. Lisp functions can be compiled individually, or (more usually) by
the file.


9. A recursive algorithm solves a problem by dividing it into a finite
number of similar, but smaller, problems.


Summary

1. Streams are sources of input or destinations of output. In
character streams, the input and output consists of characters.


2. The default stream points to the toplevel. New streams can be made
by opening files.


To get vectors and arrays displayed this way, set * p r i n t - a r r a y * to t. Lisp couldn't just use sharp-quote to represent functions, because sharp-quote by itself offers no way to represent a closure.

3 2


132

INPUT AND OUTPUT


3. You can get input as parsed objects, as strings of characters, or
as individual characters.


4. The format function provides elaborate control over output.


5. To substitute one string for another in a text file, you have to
read characters into a buffer.


6. When read encounters a macro character like ', it calls the
associated function.


Summary

1. Any string can be the name of a symbol, but symbols created by read
are transformed into uppercase by default.


2. Symbols have associated property lists, which behave like
assoc-lists, though they don't have the same form.


3. Symbols are substantial objects, more like structures than mere
names.


4. Packages map strings to symbols. To create an entry for a symbol in
a package is to intern it. Symbols do not have to be interned.


5. Packages enforce modularity by restricting which names you can
refer to. By default your programs will be in the user package, but
larger programs are often divided into several packages defined for
that purpose.




142

SYMBOLS


6. Symbols can be made accessible in other packages. Keywords are
self-evaluating and accessible in any package.


7. When a program operates on words, it's convenient to represent the
words as symbols.


Summary
1. Common Lisp provides integers, ratios, floating-point numbers, and complex numbers.
2. Numbers can be simplified and converted, and their components can be extracted.
3. Predicates for comparing numbers take any number of arguments, and compare successive pairs--except /=, which compares all pairs.
4. Common Lisp provides roughly the numerical functions you might see on a low-end scientific calculator. The same functions generally apply to numbers of several types.
5. Fixnums are integers small enough to fit in one word. They are quietly but expensively converted to bignums when necessary. Common Lisp provides for up to four types of floating-point number. The limits of each representation are implementation-dependent constants.
6. A ray-tracer generates an image by tracing the light that makes each pixel back into a simulated world.
Summary
1. Calling eval is one way to make Lisp treat lists as code, but it's inefficient and unnecessary.
2. You define a macro by saying what a call should expand into. Underneath, macros are just functions that return expressions.
3. A macro body defined with backquote resembles the expansion it will produce.
4. The macro designer must be aware of variable capture and multiple evaluation. Macros can be tested by pretty-printing their expansions.
5. Multiple evaluation is a problem for most macros that expand into setfs.


174

MACROS


6. Macros are more flexible than functions, and can be used to define a broader range of utilities. You can even use variable capture to advantage.
7. Lisp has survived because it puts its evolution in the hands of the programmer. Macros are part of what makes this possible.
Summary
1. In object-oriented programming, the function/is defined implicitly via the/methods of the objects that have them. Objects inherit methods from their parents.

2. Defining a class is like defining a structure, but more verbose. A shared slot belongs to a whole class.

3. A class inherits the slots of its superclasses.

EXERCISES



193



4. The ancestors of a class are ordered into a precedence list. The precedence algorithm is best understood visually.

5. A generic function consists of all the methods with a given name. A method is identified by its name and the specializations of its parameters. Argument precedence determines the method used when a generic function is called.

6. Methods can be augmented by auxiliary methods. Standard method combination means calling the around-method, if there is one; otherwise the before-, most specific primary, and after-methods.

7. In operator method combination, all the primary methods are treated as arguments to some operator.

8. Encapsulation can be done via packages.
9. There are two models of object-oriented programming. The generic function model is a generalization of the message-passing model.
Summary
1. Two lists can share a tail. Lists can share structure as trees without sharing top-level list structure. Shared structure can be avoided by copying. 2. Shared structure can usually be ignored, but it must be considered if you are going to modify lists. Modifying one list can modify other lists that share structure with it. 3. Queues can be represented as conses in which the car points to the first cons in a list and the cdr to the last. 4. For reasons of efficiency, destructive functions are allowed to modify their arguments. 5. In some applications, destructive implementations are the most natural. 6. Lists can be car- or cdr-circular. Lisp can represent circular and shared structure. 7. Constants occurring in the text of a program should not be modified.

212

STRUCTURE
Summary
1. Optimization should not begin too early, should be focused on bottlenecks, and should begin with algorithms.
2. Five parameters control compilation. They can be set with local or global declarations.
3. A good compiler can optimize tail calls, turning a tail-recursive function into a loop. Inline compilation is another way to avoid function calls.
4. Type declarations are not necessary, but they can make a program more efficient. Type declarations are especially important in numeric code, and code that deals with arrays.
5. Consing less can make a program faster, especially in implementations with primitive garbage collectors. Solutions include using destructive functions, pre-allocating blocks of space, and stack allocation.
6. In some situations, it might pay to draw objects from a pre-allocated pool.
7. Some parts of Common Lisp are designed for speed and others for flexibility.
8. Programming necessarily involves exploration. Exploration and optimization should be separated--sometimes even to the extent of using different languages for each.
